{"version":3,"sources":["components/Navbar/Navbar.tsx","pages/Home/Home.tsx","common/Input/Input.tsx","config/default.js","helpers.tsx","hooks/UseCloudinaryUpload.tsx","hooks/UseFormData.tsx","hooks/UseChangeInput.tsx","components/DropzoneImage/DropzoneImage.tsx","hooks/UseProffesorAuth.tsx","hooks/UseStudentAuth.tsx","hooks/UseAdminAuth.tsx","pages/Auth/Auth.tsx","features/Courses/CourseSlice.tsx","features/Students/StudentsSlice.tsx","components/Course/Course.tsx","components/CoursesList/CoursesList.tsx","components/ClipLoaderComponent/ClipLoaderComponent.tsx","pages/Courses/Courses.tsx","pages/NotFound/NotFound.tsx","pages/Logout/Logout.tsx","features/Proffesors/ProffesorSlice.tsx","components/ProffesorsList/ProffesorsList.tsx","components/FormComponent/FormComponent.tsx","pages/Proffesores/Proffesores.tsx","components/ModalComponent/ModalComponent.tsx","hooks/UseCreateCourse.tsx","hooks/UseUpdateCourse.tsx","components/ProffesorActivity/ProffesorActivity.tsx","components/StudentActivity/StudentActivity.tsx","pages/Activity/Activity.tsx","components/ProfileCard/ProfileCard.tsx","components/ProffesorProfile/ProffesorProfile.tsx","components/StudentProfile/StudentProfile.tsx","features/Admin/AdminSlice.tsx","components/AdminProfile/AdminProfile.tsx","pages/Profile/Profile.tsx","pages/Students/Students.tsx","pages/Payments/Payments.tsx","pages/Chat/Chat.tsx","App.tsx","redux/store.tsx","index.tsx"],"names":["Navbar","name","token","role","className","exact","to","Fragment","Home","Input","value","handleChange","placeholder","label","type","onChange","cloudinaryUrl","config","cloudinaryFetchUrl","setCloudinaryUserObject","user","cloudinaryImage","publicId","userId","graphqlconfiguration","requestBody","method","url","data","UseCloudinaryUpload","formData","a","axios","post","UseFormData","file","FormData","append","UseChangeInput","event","setvalues","target","prevValue","DropzoneImage","onDrop","image","useDropzone","getRootProps","getInputProps","src","alt","UseProffesorAuth","isLogin","currentlyUser","isAuth","query","email","password","configure","loginProffesor","Error","errors","message","localStorage","setItem","JSON","stringify","createProffesor","UseStudentAuth","loginStudent","createStudent","UseAdminAuth","loginAdmin","console","error","createAdmin","Auth","useState","setCloudinaryImage","setAuth","setRole","useCallback","acceptedFiles","public_id","handleSubmit","preventDefault","window","location","replace","log","onSubmit","disabled","handleDisabled","onClick","prevState","e","course","createSlice","initialState","proffesorCourses","courses","loading","reducers","setProffesorCourses","state","action","payload","setCourses","setCourse","setLoading","actions","reduxGetProffesorCourses","proffesorId","dispatch","getProffesorCourses","reduxGetCourse","courseId","getCourse","reduxGetCourses","studentId","getCourses","reduxRegisterStudentInCourse","registerStudentInCourses","setTimeout","reduxRemoveCourse","removeCourse","student","students","studentCourses","setStudents","setStudent","setStudentCourses","reduxSetStudent","getStudent","reduxGetStudentCourses","getStudentCourses","reduxRegisterCourseInStudent","registerCourseInStudent","reduxUpdateStudent","userObj","updateStudent","Course","points","description","length","React","coursesRegister","setCoursesRegister","useEffect","forEach","registerStudents","indexOf","useDispatch","handleRegister","confirm","key","style","textAlign","height","width","fontSize","CoursesList","map","override","css","ClipLoaderComponent","size","color","Courses","useSelector","fetchCourses","NotFound","Logout","removeItem","proffesor","proffesors","getProfessors","setProfessor","setProffesorRegisterCourses","reduxGetProfessors","proffesorsList","reduxSetProfessor","getProffesor","reduxUpdateProffesor","imageName","updateProffesor","ProffesorsList","groupedProffesorAndCourses","getProffesorRegisterCourses","onLoad","reduce","acc","item","push","c","FormComponent","undefined","Proffesores","displayProffesors","setDisplayProffesors","ModalComponent","modal","handleClose","userRole","handleSave","setClassName","document","addEventListener","handleClick","removeEventListener","htmlFor","UseCreateCourse","Number","isSuccess","createCourse","UseUpdateCourse","updateCourse","ProffesorActivity","history","useHistory","setModal","isUpdateModal","setIsUpdateModal","handleRemove","handleModal","handleUpdate","StudentActivity","cur","Activity","ProfileCard","registerCourses","ProffesorProfile","StudentProfile","admin","setAdmin","updateAdmin","reduxSetAdmin","adminId","getAdmin","reduxUpdateAdmin","AdminProfile","Profile","Students","getStudentsWithCoursesName","Payments","socket","socketIOClient","Chat","useRef","messagesContainer","setMessage","messages","setMessages","courseChat","emit","on","m","prevMessages","msg","disconnect","pushSendMessage","userName","time","moment","Date","format","index","ref","onKeyDown","App","setUser","credentials","getItem","parse","path","component","store","configureStore","reducer","adminSlice","proffesorSlice","studentSlice","courseSlice","middleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d78f8c7b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navbar.css\"\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const Navbar = ({\r\n    name,\r\n    token,\r\n    role\r\n}: {\r\n    name: string,\r\n    token: string,\r\n    role: string\r\n}\r\n) => (\r\n        <header className=\"main-navbar\">\r\n            <div className=\"main-navbar__container\">\r\n                <div className=\"main-navbar__item\">\r\n                    <NavLink exact to=\"/home\">Home</NavLink>\r\n                </div> {\r\n                    !token &&\r\n                    <div className=\"main-navbar__item\">\r\n                        <NavLink to=\"/auth\">Auth</NavLink>\r\n                    </div>}\r\n                {\r\n                    role === \"Admin\" &&\r\n                    <React.Fragment>\r\n                        <div className=\"main-navbar__item navbar__item__proffesores\">\r\n                            <NavLink to=\"/proffesores\">Proffesores</NavLink>\r\n                        </div>\r\n                        <div className=\"main-navbar__item navbar__item__proffesores\">\r\n                            <NavLink to=\"/students\">students</NavLink>\r\n                        </div>\r\n                    </React.Fragment>\r\n                }\r\n\r\n                {\r\n                    token && role !== \"Proffesor\" &&\r\n                    <div className=\"main-navbar__item navbar__item__courses\">\r\n                        <NavLink to=\"/courses\">Courses</NavLink>\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                    token &&\r\n                    <React.Fragment>\r\n                        {\r\n                            role === \"Admin\" ?\r\n                                <div className=\"main-navbar__item main-navbar__item__me\">\r\n                                    <NavLink to=\"/payments\">payments</NavLink>\r\n                                </div>\r\n                                :\r\n                                <div className=\"main-navbar__item  main-navbar__item__me\">\r\n                                    <NavLink to=\"/activity\">activity</NavLink>\r\n                                </div>\r\n                        }\r\n\r\n                        <div className='main-navbar__item navbar__my__profile__role__name'>\r\n                            <NavLink to=\"/my-profile\"><p ><b > {name}</b>{`  role (${role})`}</p></NavLink>\r\n                        </div>\r\n                    </React.Fragment>\r\n                }\r\n\r\n                {\r\n                    token &&\r\n                    <div className=\"main-navbar__item\">\r\n                        <NavLink to=\"/logout\">Logout</NavLink>\r\n                    </div>\r\n                }\r\n\r\n            </div> </header>)","import React from \"react\";\r\nimport \"./Home.css\";\r\nexport const Home = () => (\r\n    <div >\r\n        Home\r\n    </div>\r\n)\r\n","import React from \"react\";\r\n\r\nexport const Input = ({ value, handleChange, name, placeholder, label, type }: any) => {\r\n    return (<div className=\"form-group\">\r\n        <label>\r\n            {label}\r\n        </label>\r\n        <input\r\n            className=\"input-block\"\r\n            type={type}\r\n            placeholder={placeholder}\r\n            name={name}\r\n            value={value}\r\n            onChange={handleChange} />\r\n    </div>)\r\n}","export default {\r\n    couldinaryName: \"dyloyoawh\"\r\n}","import config from \"./config/default\";\r\n\r\nexport const cloudinaryUrl = `https://api.cloudinary.com/v1_1/${config.couldinaryName}/image/upload`;\r\nexport const cloudinaryFetchUrl = `https://res.cloudinary.com/${config.couldinaryName}/image/upload`;\r\nexport const courseAvatar = 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRd-roLsuU5Ctl3dEDcm87Wl8dGQBslplw9F7ArVcFNPMnmOs_d';\r\nexport function setCloudinaryUserObject(user: { name: string, userId: string }, cloudinaryImage: string) {\r\n    const userObj = {\r\n        name: user.name,\r\n        publicId: cloudinaryImage,\r\n        userId: user.userId\r\n    }\r\n    return userObj\r\n}\r\nexport function graphqlconfiguration(requestBody: { query: string }) {\r\n    return {\r\n        method: \"POST\",\r\n        url: \"/graphql-university\",\r\n        data: requestBody\r\n    }\r\n}\r\n\r\nexport const student = \"Student\";\r\nexport const admin = \"Admin\";\r\nexport const proffesor = \"Proffesor\";","import axios from \"axios\";\r\nimport { cloudinaryUrl } from '../helpers';\r\n\r\nexport const UseCloudinaryUpload = async (formData: FormData) => {\r\n    return await axios.post(\r\n        cloudinaryUrl,\r\n        formData,\r\n    );\r\n}\r\n\r\n","\r\nexport const UseFormData = (file: File) => {\r\n    const formData = new FormData()\r\n    formData.append('file', file)\r\n    formData.append('upload_preset', 'default_preset')\r\n    return formData\r\n}","import { ChangeEvent } from \"../interfaces\"\r\n\r\nexport const UseChangeInput = (event: ChangeEvent,\r\n    setvalues: any\r\n\r\n) => {\r\n    const { value, name } = event.target\r\n\r\n    setvalues((prevValue: any) => (\r\n        {\r\n            ...prevValue,\r\n            [name]: value\r\n        }\r\n    ))\r\n}","import React from \"react\";\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { cloudinaryFetchUrl } from \"../../helpers\";\r\nimport \"./DropzoneImage.css\";\r\n\r\nexport const DropzoneImage = ({\r\n    cloudinaryImage,\r\n    onDrop,\r\n    image }:\r\n    {\r\n        cloudinaryImage: string,\r\n        onDrop: (acceptedFiles: File[]) => Promise<void>,\r\n        image: string\r\n    }) => {\r\n    const { getRootProps, getInputProps } = useDropzone({ onDrop })\r\n\r\n    return (<div className=\"mb-2 dropzone__image__container\"  {...getRootProps()}>\r\n        <input {...getInputProps()} />\r\n\r\n        {cloudinaryImage || image ?\r\n            cloudinaryImage ?\r\n                <img className=\"dropzone\" src={`${cloudinaryFetchUrl}/${cloudinaryImage}`} alt=\"profile\" />\r\n                :\r\n                <img className=\"dropzone\" src={`${cloudinaryFetchUrl}/${image}`} alt=\"profile\" />\r\n            : null}\r\n    </div>)\r\n}","import axios from 'axios';\r\nimport { ProffesorAuth } from \"../interfaces\";\r\nimport { admin, proffesor, graphqlconfiguration } from \"../helpers\";\r\nexport const UseProffesorAuth = async (user: ProffesorAuth, isLogin: boolean, currentlyUser = admin) => {\r\n    let isAuth = false;\r\n    let requestBody = {\r\n        query: `\r\n                      query {\r\n                        loginProffesor(email: \"${user.email}\", password: \"${user.password}\") {\r\n                          userId\r\n                          name\r\n                          token\r\n                          role\r\n                          publicId\r\n                        }\r\n                      }\r\n                    `\r\n    };\r\n    if (!isLogin) {\r\n        requestBody = {\r\n            query: `\r\n                    mutation {\r\n                        createProffesor(proffesorInput: {email: \"${user.email}\", password: \"${user.password}\", name: \"${user.name}\"}) {\r\n                          userId\r\n                          name\r\n                          token\r\n                          role\r\n                          publicId\r\n                        }\r\n                      }\r\n                      `\r\n        };\r\n    }\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n\r\n        if (isLogin) {\r\n            if (!data.data.loginProffesor) throw new Error(data.errors[0].message)\r\n            if (currentlyUser === proffesor) {\r\n                localStorage.setItem('credentials', JSON.stringify(data.data.loginProffesor))\r\n            } else {\r\n                await data.data.loginProffesor\r\n            }\r\n        } else {\r\n            if (!data.data.createProffesor) throw new Error(data.errors[0].message)\r\n            if (currentlyUser === proffesor) {\r\n                localStorage.setItem('credentials', JSON.stringify(data.data.createProffesor))\r\n            }\r\n        }\r\n        isAuth = true\r\n\r\n\r\n    } catch (error) {\r\n        throw new Error(error.message)\r\n    }\r\n    return isAuth\r\n}\r\n","import axios from 'axios';\r\nimport { StudentAuth } from \"../interfaces\";\r\nimport { graphqlconfiguration } from '../helpers';\r\nexport const UseStudentAuth = async (user: StudentAuth, isLogin: boolean, image: any) => {\r\n    let isAuth = false;\r\n    let requestBody = {\r\n        query: `\r\n                  query {\r\n                    loginStudent(email: \"${user.email}\", password: \"${user.password}\") {\r\n                      email\r\n                      userId\r\n                      name\r\n                      token\r\n                      role\r\n                      publicId\r\n                    }\r\n                  }\r\n                `\r\n    };\r\n    if (!isLogin) {\r\n        requestBody = {\r\n            query: `\r\n                 mutation {\r\n                    createStudent(studentInput: \r\n                        {email: \"${user.email}\", \r\n                        password: \"${user.password}\", \r\n                        name: \"${user.name}\" , \r\n                        publicId: \"${image.publicId}\"}) {\r\n    \r\n                        userId\r\n                        name\r\n                        token\r\n                        role\r\n                        publicId\r\n                    }\r\n                  }\r\n                  `\r\n        };\r\n    }\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (isLogin) {\r\n            if (!data.data.loginStudent) throw new Error(data.errors[0].message)\r\n            localStorage.setItem('credentials', JSON.stringify(data.data.loginStudent))\r\n\r\n        } else {\r\n            if (!data.data.createStudent) throw new Error(data.errors[0].message)\r\n            localStorage.setItem('credentials', JSON.stringify(data.data.createStudent))\r\n\r\n        }\r\n\r\n        isAuth = true\r\n\r\n    } catch (error) {\r\n        throw new Error(error.message)\r\n    }\r\n    return isAuth\r\n}","import axios from 'axios';\r\nimport { AdminAuth } from './../interfaces';\r\nimport { graphqlconfiguration } from '../helpers';\r\nexport const UseAdminAuth = async (user: AdminAuth, isLogin: boolean) => {\r\n    let isAuth = false;\r\n    let requestBody = {\r\n        query: `\r\n                      query {\r\n                        loginAdmin(email: \"${user.email}\", password: \"${user.password}\") {\r\n                            userId\r\n                            name\r\n                            token\r\n                            role\r\n                            publicId\r\n                        }\r\n                      }\r\n                    `\r\n    };\r\n    if (!isLogin) {\r\n        requestBody = {\r\n            query: `\r\n                    mutation {\r\n                        createAdmin(userInput: {email: \"${user.email}\", password: \"${user.password}\", name: \"${user.name}\"}) {\r\n                            userId\r\n                            email\r\n                            name\r\n                            token\r\n                            role\r\n                            publicId\r\n                        }\r\n                      }\r\n                      `\r\n        };\r\n    }\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n\r\n        if (isLogin) {\r\n            if (!data.data.loginAdmin) return console.error(data.errors[0].message)\r\n            localStorage.setItem('credentials', JSON.stringify(data.data.loginAdmin))\r\n        } else {\r\n            if (!data.data.createAdmin) return console.error(data.errors[0].message)\r\n            localStorage.setItem('credentials', JSON.stringify(data.data.createAdmin))\r\n        }\r\n        isAuth = true\r\n\r\n\r\n    } catch (ex) {\r\n        throw console.error(ex.message)\r\n    }\r\n    return isAuth\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\n\r\nimport { Input } from \"../../common/Input/Input\";\r\nimport { UseCloudinaryUpload } from './../../hooks/UseCloudinaryUpload';\r\nimport { UseFormData } from './../../hooks/UseFormData';\r\nimport { UseChangeInput } from \"../../hooks/UseChangeInput\";\r\nimport { DropzoneImage } from \"../../components/DropzoneImage/DropzoneImage\";\r\nimport { student, admin, proffesor } from \"../../helpers\";\r\nimport { UseProffesorAuth } from './../../hooks/UseProffesorAuth';\r\nimport { UseStudentAuth } from './../../hooks/UseStudentAuth';\r\nimport { UseAdminAuth } from \"../../hooks/UseAdminAuth\";\r\nimport \"./Auth.css\";\r\n\r\nexport const Auth = () => {\r\n    const [user, setvalues] = useState({ email: \"\", password: \"\", name: \"\", image: \"\" });\r\n    const [cloudinaryImage, setCloudinaryImage] = useState(\"default_avatar_k049ck\")\r\n    const [isLogin, setAuth] = useState<boolean>(true)\r\n    const [role, setRole] = useState(student)\r\n\r\n\r\n    const onDrop = useCallback(async (acceptedFiles: File[]) => {\r\n        const formData = UseFormData(acceptedFiles[0])\r\n        const { data } = await UseCloudinaryUpload(formData)\r\n        setCloudinaryImage(() => (data.public_id))\r\n    }, [])\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n        UseChangeInput(event, setvalues)\r\n    }\r\n\r\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        let isAuth;\r\n        try {\r\n            if (role === admin) {\r\n                isAuth = await UseAdminAuth(user, isLogin)\r\n            }\r\n            if (role === proffesor) {\r\n\r\n                isAuth = await UseProffesorAuth(user, isLogin, proffesor)\r\n            }\r\n            if (role === student) {\r\n                isAuth = await UseStudentAuth(user, isLogin, cloudinaryImage)\r\n            }\r\n            if (typeof isAuth === 'boolean' && isAuth) {\r\n                window.location.replace(\"/\")\r\n            }\r\n\r\n        } catch (ex) {\r\n            console.log(ex.message)\r\n        }\r\n\r\n    }\r\n\r\n    const handleForm = () => {\r\n        setAuth(prevState => !prevState)\r\n    }\r\n\r\n    const handleSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setRole(e.target.value)\r\n\r\n    }\r\n\r\n\r\n    const handleClassName = () => {\r\n        let className = 'form-actionsw';\r\n        return className += isLogin ? ' isLogin' : ' signup'\r\n\r\n    }\r\n    const handleDisabled = () => {\r\n        let disabled = false;\r\n        if (!isLogin && role === proffesor)\r\n            disabled = true\r\n        if (!isLogin && role === admin)\r\n            disabled = true;\r\n        return disabled\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"form-container\">\r\n\r\n            <Input\r\n                label=\"Email\"\r\n                value={user.email}\r\n                handleChange={handleChange}\r\n                name=\"email\"\r\n                placeholder=\"Email...\"\r\n                type=\"text\" />\r\n            <Input\r\n                label=\"Password\"\r\n                value={user.password}\r\n                handleChange={handleChange}\r\n                name=\"password\"\r\n                placeholder=\"password...\"\r\n                type=\"password\" />\r\n            {!isLogin &&\r\n                <React.Fragment>\r\n\r\n                    < DropzoneImage\r\n                        cloudinaryImage={cloudinaryImage}\r\n                        onDrop={onDrop}\r\n                        image={user.image}\r\n                    />\r\n\r\n                    <Input\r\n                        label=\"Name\"\r\n                        value={user.name}\r\n                        handleChange={handleChange}\r\n                        name=\"name\"\r\n                        placeholder=\"name...\"\r\n                        type=\"text\" />\r\n                </React.Fragment>\r\n            }\r\n\r\n            <div className={handleClassName()}>\r\n                <button type=\"submit\" className=\"btn-secondary\" disabled={handleDisabled()}\r\n                >{isLogin ? 'Login' : 'Signup'}</button>\r\n                <button onClick={handleForm} className=\"btn-warning\" type=\"button\"> method </button>\r\n                <select value={role} onChange={handleSelect} className=\"role__select\" >\r\n                    <option value={admin}>Admin</option>\r\n                    <option value={proffesor}>Proffesor</option>\r\n                    <option value={student}>Student</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nimport { AppDispatch } from \"../../redux/store\";\r\nimport { graphqlconfiguration } from \"../../helpers\";\r\nconst course = createSlice({\r\n    name: \"course\",\r\n    initialState: {\r\n        proffesorCourses: [],\r\n        courses: [],\r\n        course: {},\r\n        loading: false\r\n    },\r\n    reducers: {\r\n        setProffesorCourses: (state, action) => {\r\n            state.proffesorCourses = action.payload\r\n        },\r\n        setCourses: (state, action) => {\r\n            state.courses = action.payload\r\n        },\r\n        setCourse: (state, action) => {\r\n            state.course = action.payload\r\n        },\r\n\r\n        setLoading: (state, action) => {\r\n            state.loading = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const {\r\n    setProffesorCourses,\r\n    setCourses,\r\n    setCourse,\r\n    setLoading\r\n} = course.actions;\r\nexport default course.reducer\r\n\r\n\r\n\r\nexport const reduxGetProffesorCourses = (proffesorId: string\r\n) => async (dispatch: AppDispatch) => {\r\n\r\n    let requestBody = {\r\n        query: `\r\n            query {\r\n                getProffesorCourses(proffesorId: \"${proffesorId}\") {\r\n                    courseId\r\n                    name\r\n                    points \r\n                    description \r\n                    proffesorId \r\n                    registerStudents\r\n                    publicId\r\n            }\r\n          }\r\n              `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        await dispatch(setProffesorCourses(data.data.getProffesorCourses))\r\n\r\n    } catch (ex) {\r\n        console.error(ex.message);\r\n    }\r\n}\r\nexport const reduxGetCourse = (courseId: string\r\n) => async (dispatch: AppDispatch) => {\r\n    // console.log(\"courseId\", courseId)\r\n    let course;\r\n    let requestBody = {\r\n        query: `\r\n            query {\r\n                getCourse(courseId: \"${courseId}\") {\r\n                    name\r\n                    points \r\n                    courseId\r\n                    description \r\n                    publicId\r\n                    proffesorId \r\n                    registerStudents\r\n                    courseChat {\r\n                        sender\r\n                        name\r\n                        message\r\n                        time\r\n                        publicId\r\n                    }\r\n            }\r\n          }\r\n              `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        // console.log(data)\r\n        if (!data.data.getCourse) return console.error(data.errors[0].message)\r\n        course = await data.data.getCourse\r\n        await dispatch(setCourse(data.data.getCourse))\r\n\r\n    } catch (ex) {\r\n        console.error(ex.message);\r\n    }\r\n    return course\r\n}\r\nexport const reduxGetCourses = (studentId: string\r\n) => async (dispatch: AppDispatch) => {\r\n    let requestBody = {\r\n        query: `\r\n            query {\r\n                getCourses(studentId: \"${studentId}\") {\r\n                    courseId\r\n                    name\r\n                    points \r\n                    description \r\n                    proffesorId \r\n                    registerStudents\r\n                    publicId\r\n            }\r\n          }\r\n              `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.getCourses) return console.error(data.errors[0].message)\r\n        await dispatch(setCourses(data.data.getCourses))\r\n\r\n    } catch (ex) {\r\n        console.error(ex.message);\r\n    }\r\n}\r\nexport const reduxRegisterStudentInCourse = (courseId: string, studentId: string\r\n) => async (dispatch: AppDispatch) => {\r\n    await dispatch(setLoading(true))\r\n\r\n    let requestBody = {\r\n        query: `\r\n            mutation {\r\n                registerStudentInCourses(courseId:  \"${courseId}\", studentId: \"${studentId}\") {\r\n                    courseId\r\n                    name\r\n                    points \r\n                    description \r\n                    proffesorId \r\n                    registerStudents\r\n                    publicId\r\n                }\r\n              }\r\n            `\r\n    };\r\n    try {\r\n\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.registerStudentInCourses) return console.error(data.errors[0].message)\r\n\r\n        await dispatch(setCourses(data.data.registerStudentInCourses))\r\n        setTimeout(async () => {\r\n            await dispatch(setLoading(false))\r\n        }, 2000)\r\n\r\n    } catch (ex) {\r\n        return console.error(ex.message);\r\n    }\r\n}\r\nexport const reduxRemoveCourse = (courseId: string,\r\n    proffesorId: string\r\n) => async (dispatch: AppDispatch) => {\r\n    let requestBody = {\r\n        query: `\r\n            mutation {\r\n                removeCourse(courseId:  \"${courseId}\", proffesorId: \"${proffesorId}\") {\r\n                    courseId\r\n                    name\r\n                    points \r\n                    description \r\n                    proffesorId \r\n                    registerStudents\r\n                    publicId\r\n                }\r\n              }\r\n            `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.removeCourse) return console.error(data.errors[0].message)\r\n        await dispatch(setProffesorCourses(data.data.removeCourse))\r\n\r\n    } catch (ex) {\r\n        console.error(ex.message);\r\n    }\r\n}\r\n\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { AppDispatch } from \"../../redux/store\";\r\nimport axios from 'axios';\r\nimport { graphqlconfiguration } from \"../../helpers\";\r\n\r\nconst student = createSlice({\r\n    name: \"student\",\r\n    initialState: {\r\n        students: [],\r\n        student: {},\r\n        studentCourses: []\r\n    },\r\n    reducers: {\r\n        setStudents: (state, action) => {\r\n            state.students = action.payload\r\n        },\r\n        setStudent: (state, action) => {\r\n            state.student = action.payload\r\n        },\r\n        setStudentCourses: (state, action) => {\r\n            state.studentCourses = action.payload\r\n        },\r\n\r\n    }\r\n})\r\n\r\nexport const {\r\n\r\n    setStudent,\r\n    setStudents,\r\n    setStudentCourses\r\n\r\n} = student.actions;\r\nexport default student.reducer\r\n\r\n\r\n\r\nexport const reduxGetStudentsWithCousesName = (\r\n) => async (dispatch: AppDispatch) => {\r\n    let isSuccess = false;\r\n    let requestBody = {\r\n        query: `\r\n                query {\r\n                    getStudentsWithCoursesName(name: \"ori mazrafi\") {\r\n                        name\r\n                        email\r\n                        role\r\n                        publicId\r\n                        registerCourses{\r\n                            id\r\n                            name\r\n                        }\r\n                }\r\n              }\r\n                  `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.getStudentsWithCoursesName) return new Error(data.errors[0].message)\r\n        dispatch(setStudents(data.data.getStudentsWithCoursesName))\r\n    } catch (error) {\r\n        return new Error(error.message)\r\n    }\r\n    isSuccess = true\r\n    return isSuccess\r\n}\r\nexport const reduxGetStudents = (\r\n) => async (dispatch: AppDispatch) => {\r\n    let isSuccess = false;\r\n    let requestBody = {\r\n        query: `\r\n                query {\r\n                    getStudents(name: \"ori mazrafi\") {\r\n                        name\r\n                        email\r\n                        role\r\n                        registerCourses\r\n                        publicId\r\n                }\r\n              }\r\n                  `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.getStudents) return new Error(data.errors[0].message)\r\n        dispatch(setStudents(data.data.getStudents))\r\n    } catch (error) {\r\n        return new Error(error.message)\r\n    }\r\n    isSuccess = true\r\n    return isSuccess\r\n}\r\n\r\nexport const reduxSetStudent = (studentId: string\r\n) => async (dispatch: AppDispatch) => {\r\n    console.log(studentId)\r\n    let requestBody = {\r\n        query: `\r\n                query {\r\n                    getStudent(studentId: \"${studentId}\") {\r\n                        userId\r\n                        name\r\n                        email \r\n                        role \r\n                        publicId\r\n                }\r\n              }\r\n                  `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.getStudent) return console.error(data.errors[0].message)\r\n        dispatch(setStudent(data.data.getStudent))\r\n    } catch (error) {\r\n        return console.error(error.message)\r\n\r\n    }\r\n}\r\n\r\nexport const reduxGetStudentCourses = (studentId: string\r\n) => async (dispatch: AppDispatch) => {\r\n    let requestBody = {\r\n        query: `\r\n                query {\r\n                    getStudentCourses(studentId: \"${studentId}\") {\r\n                        courseId\r\n                        name\r\n                        points\r\n                        description\r\n                        proffesorId\r\n                        registerStudents\r\n                        publicId\r\n                }\r\n              }\r\n                  `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.getStudentCourses) return console.error(data.errors[0].message)\r\n        await dispatch(setStudentCourses(data.data.getStudentCourses))\r\n    } catch (error) {\r\n        return console.error(error.message)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const reduxRegisterCourseInStudent = (studentId: string, courseId: string\r\n\r\n) => async (dispatch: AppDispatch) => {\r\n    let requestBody = {\r\n        query: `\r\n                mutation {\r\n                    registerCourseInStudent( studentId: \"${studentId}\", courseId:  \"${courseId}\") {\r\n                        studentId\r\n                        publicId\r\n                        name\r\n                        role \r\n                        registerCourses\r\n                    }\r\n                  }\r\n                `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.registerCourseInStudent) return console.error(data.errors[0].message)\r\n        await dispatch(setStudents(data.data.registerCourseInStudent))\r\n    } catch (error) {\r\n        return console.error(error.message)\r\n\r\n    }\r\n}\r\nexport const reduxUpdateStudent = (userObj: any\r\n) => async (dispatch: AppDispatch) => {\r\n    let requestBody = {\r\n        query: `\r\n                mutation {\r\n                    updateStudent( studentId: \"${userObj.userId}\", name: \"${userObj.name}\",\r\n                      publicId: \"${userObj.publicId}\") {\r\n                        userId\r\n                        name\r\n                        role \r\n                        registerCourses\r\n                        publicId\r\n                    }\r\n                  }\r\n                `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n\r\n        if (!data.data.updateStudent) return console.error(data.errors[0].message)\r\n        await dispatch(setStudent(data.data.updateStudent))\r\n    } catch (error) {\r\n        return console.error(error.message)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { cloudinaryFetchUrl } from \"../../helpers\";\r\nimport { reduxRegisterStudentInCourse } from \"./../../features/Courses/CourseSlice\";\r\nimport { reduxRegisterCourseInStudent } from \"./../../features/Students/StudentsSlice\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { CourseInterface } from \"../../interfaces\";\r\nimport \"./Course.css\";\r\n\r\nexport const Course = (\r\n    { name, points, description, courseId, userId, courses, length, role, publicId }:\r\n        {\r\n            name: string, points: number, description: string,\r\n            courseId: string, userId: string, courses: CourseInterface[], length: number\r\n            role: string,\r\n            publicId: string\r\n        }) => {\r\n\r\n    const [coursesRegister, setCoursesRegister] = React.useState<any>([])\r\n    React.useEffect(() => {\r\n        courses.forEach((course: CourseInterface) => {\r\n            if (course.registerStudents.indexOf(userId) !== -1) {\r\n                setCoursesRegister((prevState: any) => [...prevState, course.courseId])\r\n            }\r\n\r\n        });\r\n    }, [courses, userId])\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const handleRegister = async () => {\r\n        if (window.confirm('Are you sure you wish to sign to this course? this is cost 2000$')) {\r\n            await dispatch(reduxRegisterStudentInCourse(courseId, userId))\r\n            await dispatch(reduxRegisterCourseInStudent(userId, courseId))\r\n        }\r\n\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\" card card-course\" key={name}>\r\n                <h5 className=\"card-title\" style={{ textAlign: \"center\" }}>{name} </h5>\r\n                {publicId !== null ?\r\n                    <img className=\"courses__list__image\" src={`${cloudinaryFetchUrl}/${publicId}`} alt=\"profile\" height=\"100\" width=\"200\" />\r\n                    :\r\n                    <img className=\"courses__list__image\" src={`${cloudinaryFetchUrl}/download_nljny4`} alt=\"profile\" height=\"100\" width=\"200\" />\r\n                }                <div className=\"card-body card__course__body\">\r\n                    <p className=\"card-title\">points : <b>{points}</b> </p>\r\n                    <div>\r\n                        <small className=\"card-title\" style={{ fontSize: \"12px\" }}>\r\n                            description : {description}\r\n                        </small>\r\n                    </div>\r\n                    <div className=\"card__small__register\">\r\n                        {role === 'Student' &&\r\n                            (\r\n\r\n                                (coursesRegister.indexOf(courseId) !== -1) ?\r\n                                    <p style={{ fontSize: \"14px\" }} className=\"text-success\"><b>you already register for this course</b></p> :\r\n                                    <button className=\"btn btn-success\" disabled={coursesRegister.indexOf(courseId) !== -1}\r\n                                        onClick={handleRegister} >\r\n                                        sign up\r\n                        </button>\r\n                            )\r\n                        }\r\n                        <div className=\"sweet-loading\">\r\n\r\n                        </div>\r\n                    </div>\r\n                    {role !== 'Student' &&\r\n                        <small className=\"card__small__register\">\r\n                            already <b>{length} student {length > 1 ? 's are' : 'is'}</b>   register!\r\n                       </small>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n}","import React from \"react\";\r\nimport { Course } from \"../Course/Course\";\r\nimport { CourseInterface } from \"../../interfaces\";\r\nimport \"./CoursesList.css\";\r\n\r\nexport const CoursesList = ({ courses, role, userId }: { courses: CourseInterface[], role: string, userId: string }) => {\r\n    return (\r\n        <div className=\"courses__list__container\">\r\n            {courses && courses.map((course: CourseInterface) => (\r\n                <Course\r\n                    length={course.registerStudents.length}\r\n                    courses={courses}\r\n                    userId={userId}\r\n                    role={role}\r\n                    courseId={course.courseId}\r\n                    key={course.name}\r\n                    name={course.name}\r\n                    points={course.points}\r\n                    description={course.description}\r\n                    publicId={course.publicId}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const ClipLoaderComponent = ({ loading }: { loading: boolean }) => {\r\n    return <ClipLoader\r\n        css={override}\r\n        size={150}\r\n        color={\"#123abc\"}\r\n        loading={loading}\r\n    />\r\n\r\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { reduxGetCourses } from \"../../features/Courses/CourseSlice\";\r\nimport { CoursesList } from './../../components/CoursesList/CoursesList';\r\nimport { reduxGetStudentCourses } from \"../../features/Students/StudentsSlice\";\r\nimport { CourseInterface } from './../../interfaces';\r\nimport { ClipLoaderComponent } from \"../../components/ClipLoaderComponent/ClipLoaderComponent\";\r\nimport \"./Courses.css\";\r\n\r\n\r\nexport const Courses = ({ userId, role }: { userId: string, role: string }) => {\r\n    const { courses, loading } = useSelector((state: { course: { courses: CourseInterface[], loading: boolean } }) => state.course)\r\n    const dispatch = useDispatch();\r\n    React.useEffect(() => {\r\n        const fetchCourses = async () => {\r\n            await dispatch(reduxGetCourses(userId))\r\n            await dispatch(reduxGetStudentCourses(userId))\r\n\r\n        }\r\n        fetchCourses()\r\n    }, [userId, dispatch])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {loading ?\r\n                <ClipLoaderComponent loading={loading} />\r\n                :\r\n                <div className=\"courses__container\" >\r\n                    {courses.length > 0 &&\r\n                        <CoursesList courses={courses} userId={userId} role={role} />\r\n                    }\r\n                </div>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./NotFound.css\";\r\nexport const NotFound = () => (\r\n    <div >\r\n        NotFound\r\n    </div>\r\n)\r\n","import React from \"react\";\r\n\r\nexport const Logout = () => {\r\n    React.useEffect(() => {\r\n        localStorage.removeItem('credentials');\r\n        return window.location.replace(\"/auth\")\r\n    }\r\n        , []);\r\n    return null\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { AppDispatch } from \"../../redux/store\";\r\nimport axios from 'axios';\r\nimport { graphqlconfiguration } from \"../../helpers\";\r\n\r\nconst proffesor = createSlice({\r\n    name: \"proffesor\",\r\n    initialState: {\r\n        proffesors: [],\r\n        proffesorCourses: [],\r\n        proffesor: {},\r\n\r\n    },\r\n    reducers: {\r\n        getProfessors: (state, action) => {\r\n            state.proffesors = action.payload\r\n        },\r\n        setProfessor: (state, action) => {\r\n            state.proffesor = action.payload\r\n        },\r\n        setProffesorRegisterCourses: (state, action) => {\r\n            state.proffesorCourses = action.payload\r\n        },\r\n\r\n\r\n    }\r\n})\r\nexport const {\r\n    getProfessors,\r\n    setProfessor,\r\n    setProffesorRegisterCourses\r\n} = proffesor.actions;\r\nexport default proffesor.reducer\r\n\r\nexport const reduxGetProfessors = (\r\n) => async (dispatch: AppDispatch) => {\r\n    let isAuth = false;\r\n    let requestBody = {\r\n        query: `\r\n            query {\r\n                proffesorsList(name: \"ori mazrafi\") {\r\n                    userId\r\n                    name\r\n                    email\r\n                    registerCourses\r\n                    publicId\r\n            }\r\n          }\r\n              `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.proffesorsList) throw new Error('there are no user')\r\n        dispatch(getProfessors(data.data.proffesorsList))\r\n    } catch (error) {\r\n        console.error(error.message);\r\n    }\r\n    return isAuth\r\n}\r\nexport const reduxSetProfessor = (proffesorId: string\r\n) => async (dispatch: AppDispatch) => {\r\n    let isAuth = false;\r\n    let requestBody = {\r\n        query: `\r\n            query {\r\n                getProffesor(proffesorId: \"${proffesorId}\") {\r\n                    userId\r\n                    name\r\n                    registerCourses\r\n                    email\r\n                    publicId\r\n            }\r\n          }\r\n              `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.getProffesor) throw new Error('there are no user')\r\n        dispatch(setProfessor(data.data.getProffesor))\r\n    } catch (error) {\r\n        console.error('error', error);\r\n    }\r\n    return isAuth\r\n}\r\nexport const reduxGetProfessorAndCourses = (\r\n) => async (dispatch: AppDispatch) => {\r\n    let requestBody = {\r\n        query: `\r\n            query {\r\n                getProffesorRegisterCourses(name: \"ori mazrafi\") {\r\n                    courseId\r\n                    name\r\n                    proffesorId\r\n            }\r\n          }\r\n              `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.getProffesorRegisterCourses) throw new Error('there are no user')\r\n        dispatch(setProffesorRegisterCourses(data.data.getProffesorRegisterCourses))\r\n    } catch (ex) {\r\n\r\n        console.error(ex.message);\r\n    }\r\n}\r\n\r\n\r\nexport const reduxUpdateProffesor = (userObj: any\r\n\r\n) => async (dispatch: AppDispatch) => {\r\n    console.log(userObj.imageName)\r\n    let isAuth = false;\r\n    let requestBody = {\r\n        query: `\r\n                    mutation {\r\n                        updateProffesor( proffesorId: \"${userObj.userId}\", name: \"${userObj.name}\",\r\n                         image: \"${userObj.imageName}\", publicId: \"${userObj.publicId}\") {\r\n                            userId\r\n                            name\r\n                            email\r\n                            registerCourses\r\n                            publicId\r\n                        }\r\n                      }\r\n                    `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n\r\n\r\n        await dispatch(setProfessor(data.data.updateProffesor))\r\n    } catch (error) {\r\n        console.error('ernjknror', error);\r\n    }\r\n    return isAuth\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { reduxGetProfessorAndCourses } from './../../features/Proffesors/ProffesorSlice';\r\nimport { cloudinaryFetchUrl } from \"../../helpers\";\r\nimport { ProffesorProfileI, ProffesorIntegrateCourses, ProffesorIntegrateCoursesObject } from \"../../interfaces\";\r\nimport \"./ProffesorsList.css\";\r\n\r\nexport const ProffesorsList = ({ proffesorsList }: { proffesorsList: ProffesorProfileI[] }) => {\r\n    let groupedProffesorAndCourses: any;\r\n    const dispatch = useDispatch()\r\n    const { proffesorCourses } = useSelector((state: { proffesor: { proffesorCourses: ProffesorIntegrateCourses[] } }) => state.proffesor)\r\n    React.useEffect(() => {\r\n        const onLoad = async () => {\r\n            await dispatch(reduxGetProfessorAndCourses())\r\n        }\r\n        onLoad()\r\n    }, [dispatch])\r\n    if (proffesorCourses) {\r\n        groupedProffesorAndCourses = proffesorCourses.reduce((acc: any, item: ProffesorIntegrateCoursesObject) => {\r\n            (acc[item.proffesorId] || (acc[item.proffesorId] = [])).push({ courseId: item.courseId, name: item.name });\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    return (\r\n        <div className=\"proffesor__list__container\">\r\n            {proffesorsList.map((proffesor: ProffesorProfileI) => {\r\n                return (\r\n                    <div className=\"card\" key={proffesor.email}>\r\n                        <h5 className=\"card-title\" > {proffesor.name}</h5>\r\n                        <img src={`${cloudinaryFetchUrl}/${proffesor.publicId}`} alt=\"profile\" />\r\n                        <div className=\"card-body card__proffesor__body\" >\r\n                            <h5 >proffesor courses:</h5>\r\n                            <div className=\"card__small__register\" >\r\n                                {groupedProffesorAndCourses[proffesor.userId] &&\r\n                                    groupedProffesorAndCourses[proffesor.userId]\r\n                                        .map((c: { name: string }) => <h6 key={c.name} ><b> {c.name}</b></h6>)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Input } from './../../common/Input/Input';\r\n\r\nexport const FormComponent = (\r\n    {\r\n        handleSubmit,\r\n        data,\r\n        handleChange,\r\n\r\n    }: {\r\n        handleSubmit: (event: React.FormEvent<HTMLFormElement>) => void,\r\n        data: {\r\n            email: string,\r\n            password: string,\r\n            name: string\r\n            points?: string,\r\n            description?: string,\r\n\r\n        },\r\n        handleChange: (event: React.ChangeEvent<HTMLFormElement>) => void,\r\n\r\n    }\r\n\r\n) => {\r\n\r\n\r\n    return (\r\n        <div className=\"form__wrapper\">\r\n            <form onSubmit={handleSubmit} className=\"form-container\">\r\n                {data.email !== undefined &&\r\n                    <Input\r\n                        label=\"Email\"\r\n                        value={data.email}\r\n                        handleChange={handleChange}\r\n                        name=\"email\"\r\n                        placeholder=\"Email...\"\r\n                        type=\"text\" />\r\n                }\r\n                {data.password !== undefined &&\r\n                    <Input\r\n                        label=\"Password\"\r\n                        value={data.password}\r\n                        handleChange={handleChange}\r\n                        name=\"password\"\r\n                        placeholder=\"password...\"\r\n                        type=\"password\" />\r\n                }\r\n                {data.name !== undefined &&\r\n                    <Input\r\n                        label=\"Name\"\r\n                        value={data.name}\r\n                        handleChange={handleChange}\r\n                        name=\"name\"\r\n                        placeholder=\"name...\"\r\n                        type=\"text\" />\r\n                }\r\n                {data.points !== undefined &&\r\n                    <Input\r\n                        label=\"Points\"\r\n                        value={data.points}\r\n                        handleChange={handleChange}\r\n                        name=\"points\"\r\n                        type={\"number\"} />\r\n                }\r\n                {data.description !== undefined &&\r\n\r\n                    <Input\r\n                        label=\"Description\"\r\n                        value={data.description}\r\n                        handleChange={handleChange}\r\n                        name=\"description\"\r\n                        placeholder=\"Description...\"\r\n                        type={\"text\"}\r\n\r\n                    />\r\n\r\n                }\r\n\r\n                <div >\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}","import React, { useEffect } from \"react\";\r\nimport { reduxGetProfessors } from \"../../features/Proffesors/ProffesorSlice\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ProffesorsList } from \"../../components/ProffesorsList/ProffesorsList\";\r\nimport { UseChangeInput } from \"../../hooks/UseChangeInput\";\r\nimport { FormComponent } from './../../components/FormComponent/FormComponent';\r\nimport { UseProffesorAuth } from './../../hooks/UseProffesorAuth';\r\nimport { admin } from \"../../helpers\";\r\nimport { ProffesorProfileI } from \"../../interfaces\";\r\nimport \"./Proffesores.css\";\r\n\r\nexport const Proffesores = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { proffesors } = useSelector((state: { proffesor: { proffesors: ProffesorProfileI[] } }) => state.proffesor)\r\n\r\n    const [user, setvalues] = React.useState({ email: \"\", password: \"\", name: \"\" });\r\n    const [displayProffesors, setDisplayProffesors] = React.useState(true)\r\n\r\n    useEffect(() => {\r\n        const onLoad = async () => {\r\n            await dispatch(reduxGetProfessors())\r\n        }\r\n        onLoad()\r\n    }, [displayProffesors, dispatch])\r\n\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n        UseChangeInput(event, setvalues)\r\n    }\r\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        try {\r\n\r\n            let isAuth = await UseProffesorAuth(user, false, admin)\r\n\r\n            await dispatch(reduxGetProfessors())\r\n            if (isAuth) {\r\n                setDisplayProffesors(true);\r\n                setvalues({ email: \"\", password: \"\", name: \"\" })\r\n            }\r\n\r\n        } catch (ex) {\r\n            console.error(ex.message)\r\n        }\r\n\r\n    }\r\n    const handleToggle = () => {\r\n        setDisplayProffesors(prevState => !prevState)\r\n    }\r\n\r\n    return (\r\n        <div className=\"proffesors__container\">\r\n            <button className=\"btn btn-primary add-proffesor\" onClick={handleToggle}>{displayProffesors ? `Add proffesor` : `display Proffesors`}</button>\r\n            {displayProffesors ?\r\n                <React.Fragment>\r\n                    {proffesors && <ProffesorsList proffesorsList={proffesors} />\r\n                    }\r\n                </React.Fragment>\r\n                :\r\n                <FormComponent\r\n                    handleSubmit={handleSubmit}\r\n                    data={user}\r\n                    handleChange={handleChange}\r\n                />\r\n            }\r\n        </div>\r\n\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { DropzoneImage } from \"../DropzoneImage/DropzoneImage\";\r\nimport { Input } from './../../common/Input/Input';\r\nimport \"./ModalComponent.css\";\r\nimport { ChangeEvent, ProffesorProfileI } from \"../../interfaces\";\r\nexport const ModalComponent = (\r\n    { modal,\r\n        handleClose,\r\n        userRole,\r\n        cloudinaryImage,\r\n        onDrop,\r\n        user,\r\n        handleChange,\r\n        handleSave\r\n    }: {\r\n        modal: boolean,\r\n        handleModal: () => void,\r\n        handleClose: () => void,\r\n        userRole: string,\r\n        cloudinaryImage: string,\r\n        onDrop: (file: File[]) => Promise<void>,\r\n        user: ProffesorProfileI | any,\r\n        handleChange: (event: ChangeEvent) => void,\r\n        handleSave: () => Promise<void>\r\n    }\r\n\r\n) => {\r\n    const [className, setClassName] = useState(\"modal\")\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClick, false)\r\n\r\n        setClassName(() => modal ? \"modal modal-open\" : \"modal modal-close\")\r\n        return (() => {\r\n            document.removeEventListener('mousedown', handleClick, false)\r\n        })\r\n    }, [modal])\r\n\r\n    const handleClick = (e: any\r\n    ) => {\r\n        const { className } = e.target\r\n        if (className === \"modal-bg\" ||\r\n            className === \"btn-close\" ||\r\n            className === \"paper-btn\"\r\n        ) {\r\n            handleClose()\r\n        }\r\n        if (className === \"paper-btn save\") {\r\n            handleSave()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={className}    >\r\n                <label className=\"modal-bg\" htmlFor=\"modal-1\"></label>\r\n                <div className=\"modal-body\">\r\n                    <h4 className=\"modal-title\">{user.name ? \"Update \" : \"Add \"}{userRole}</h4>\r\n                    <DropzoneImage\r\n                        cloudinaryImage={cloudinaryImage}\r\n                        onDrop={onDrop}\r\n                        image={user.publicId}\r\n                    />\r\n                    <label className=\"btn-close\" onClick={handleClick}>X</label>\r\n                    <h5 className=\"modal-subtitle\">\r\n                        <Input\r\n                            label=\"Name\"\r\n                            value={user.name}\r\n                            handleChange={handleChange}\r\n                            name=\"name\"\r\n                            placeholder=\"Name...\"\r\n                            type=\"text\" />\r\n                        {userRole === 'proffesor' &&\r\n                            <div>\r\n\r\n                                <p>Email</p>\r\n                                <div className=\"sm-2 col border\">{user.email}</div>\r\n                            </div>\r\n\r\n                        }\r\n\r\n\r\n                        {userRole === 'course' &&\r\n                            <Input\r\n                                label=\"Points\"\r\n                                value={user.points}\r\n                                handleChange={handleChange}\r\n                                name=\"points\"\r\n                                type={\"number\"} />\r\n                        }\r\n                        {userRole === 'course' &&\r\n                            <div className=\"form-group\">\r\n                                <label>Description</label>\r\n                                <textarea className=\"input-block\"\r\n                                    placeholder=\"Description...\"\r\n                                    value={user.description}\r\n                                    onChange={handleChange}\r\n                                    name=\"description\"\r\n                                ></textarea>\r\n                            </div>\r\n                        }\r\n                    </h5>\r\n\r\n                    <label className=\"paper-btn\" onClick={handleClick}>close!</label>\r\n                    <button className=\"paper-btn btn-secondary\" onClick={handleSave} disabled={\r\n                        (userRole === 'course'\r\n                            &&\r\n                            !user.name &&\r\n                            !user.points &&\r\n                            !user.description\r\n                            && true\r\n                        )\r\n                        ||\r\n                        (userRole === 'proffesor' &&\r\n                            !user.name &&\r\n                            !user.publicId &&\r\n                            true)\r\n                    } >Save!</button>\r\n                </div>\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}","import { Course } from '../interfaces';\r\nimport axios from 'axios';\r\nimport { graphqlconfiguration } from '../helpers';\r\nexport const UseCreateCourse = async (course: Course, cloudinaryImage: string) => {\r\n    course.points = Number(course.points);\r\n    let isSuccess = false\r\n    try {\r\n        let requestBody = {\r\n            query: `\r\n                    mutation {\r\n                        createCourse(courseInput: {name: \"${course.name}\", points: ${course.points}, description: \"${course.description}\"\r\n                        , proffesorId: \"${course.proffesorId}\"\r\n                        , publicId: \"${cloudinaryImage}\"\r\n                    }) {\r\n                            _id\r\n                    }\r\n                }\r\n                `\r\n        };\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.createCourse) return console.error(new Error(data.errors[0].message))\r\n        isSuccess = true;\r\n    } catch (ex) {\r\n        return console.error(ex.message)\r\n    }\r\n    return isSuccess\r\n}\r\n","import axios from 'axios';\r\nimport { graphqlconfiguration } from '../helpers';\r\nexport const UseUpdateCourse = async (course: any, cloudinaryImage: string) => {\r\n    if (typeof course.points === 'number') {\r\n        course.points = Number(course.points);\r\n    }\r\n    let isSuccess = false\r\n    try {\r\n        let requestBody = {\r\n            query: `\r\n                    mutation {\r\n                        updateCourse(\r\n                            courseUpdateInput: {\r\n                            courseId: \"${course.courseId}\"\r\n                            name: \"${course.name}\", \r\n                            points: ${course.points}, \r\n                            description: \"${course.description}\",\r\n                            publicId: \"${cloudinaryImage}\"\r\n                    }) {\r\n                            _id\r\n                    }\r\n                }\r\n                `\r\n        };\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.updateCourse) return console.error(new Error(data.errors[0].message))\r\n        isSuccess = true;\r\n    } catch (ex) {\r\n        return console.error(ex.message)\r\n    }\r\n    return isSuccess\r\n}\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { reduxGetProffesorCourses, reduxRemoveCourse } from \"../../features/Courses/CourseSlice\";\r\nimport { reduxSetProfessor } from \"../../features/Proffesors/ProffesorSlice\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ModalComponent } from './../ModalComponent/ModalComponent';\r\nimport { UseFormData } from './../../hooks/UseFormData';\r\nimport { UseCloudinaryUpload } from './../../hooks/UseCloudinaryUpload';\r\nimport { UseChangeInput } from \"../../hooks/UseChangeInput\";\r\nimport { UseCreateCourse } from './../../hooks/UseCreateCourse';\r\nimport { UseUpdateCourse } from \"../../hooks/UseUpdateCourse\";\r\nimport { ChangeEvent, ProffesorWithCourses } from \"../../interfaces\";\r\nimport { cloudinaryFetchUrl } from \"../../helpers\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"./ProffesorActivity.css\";\r\n\r\nexport const ProffesorActivity = ({ proffesorId, publicId, name }: { proffesorId: string, publicId: string, name: string }) => {\r\n    const history = useHistory()\r\n\r\n    const { proffesorCourses } = useSelector((state: { course: { proffesorCourses: ProffesorWithCourses[] } }) => state.course)\r\n    const dispatch = useDispatch()\r\n    const [modal, setModal] = useState(false);\r\n    const [isUpdateModal, setIsUpdateModal] = useState(false);\r\n    const [course, setCourse] = useState({\r\n        courseId: \"\",\r\n        name: \"\",\r\n        points: 0,\r\n        description: \"\",\r\n        proffesorId,\r\n        publicId: \"\",\r\n\r\n    });\r\n    const [cloudinaryImage, setCloudinaryImage] = useState(\"download_nljny4\")\r\n\r\n    useEffect(() => {\r\n        const onLoad = async () => {\r\n            await dispatch(reduxGetProffesorCourses(proffesorId))\r\n            await dispatch(reduxSetProfessor(proffesorId))\r\n\r\n        }\r\n        onLoad()\r\n    }, [dispatch, proffesorId, modal])\r\n\r\n    const handleRemove = async (courseId: string) => {\r\n        if (window.confirm('Are you sure you wish to delete this item?')) {\r\n            await dispatch(reduxRemoveCourse(courseId, proffesorId))\r\n        }\r\n\r\n    }\r\n    const handleClose = () => {\r\n        setIsUpdateModal(() => false)\r\n\r\n        setModal(false);\r\n        setCloudinaryImage(() => (\"\"))\r\n    }\r\n\r\n    const handleModal = () => {\r\n\r\n        setCourse(() => ({\r\n            courseId: \"\",\r\n            name: \"\",\r\n            points: 0,\r\n            description: \"\",\r\n            proffesorId: proffesorId,\r\n            publicId: \"download_nljny4\",\r\n            role: \"\",\r\n            registerStudents: []\r\n        }))\r\n        setTimeout(() => {\r\n\r\n            setModal(true);\r\n        }, 200)\r\n    }\r\n    const handleUpdate = (course: ProffesorWithCourses) => {\r\n        setCloudinaryImage(() => (course.publicId))\r\n        setIsUpdateModal(() => true)\r\n        setCourse(() => ({\r\n            courseId: course.courseId,\r\n            name: course.name,\r\n            points: course.points,\r\n            description: course.description,\r\n            proffesorId: course.proffesorId,\r\n            publicId: course.publicId,\r\n\r\n\r\n        }))\r\n        setModal(true);\r\n\r\n    }\r\n\r\n    const onDrop = useCallback(async (acceptedFiles: File[]) => {\r\n        const formData = UseFormData(acceptedFiles[0])\r\n        const { data } = await UseCloudinaryUpload(formData)\r\n        setCloudinaryImage(() => (data.public_id))\r\n    }, [])\r\n    const handleSave = async () => {\r\n        try {\r\n\r\n            let isSuccess: any = false\r\n            if (isUpdateModal) {\r\n                isSuccess = await UseUpdateCourse(course, cloudinaryImage);\r\n                if (isSuccess) {\r\n                    setTimeout(() => {\r\n                        setModal(false);\r\n                    }, 1000)\r\n                }\r\n\r\n\r\n            } else {\r\n                isSuccess = await UseCreateCourse(course, cloudinaryImage);\r\n                if (isSuccess) {\r\n\r\n                    setTimeout(() => {\r\n                        setModal(false);\r\n                    }, 1000)\r\n                }\r\n\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex.message)\r\n        }\r\n\r\n    }\r\n    const handleChange = (event: ChangeEvent) => {\r\n        UseChangeInput(event, setCourse)\r\n    }\r\n    const handleChat = (courseId: string) => {\r\n        console.log(name)\r\n        history.push(`/chat/${courseId}`, { proffesorId, courseId, name, publicId })\r\n    }\r\n    return (\r\n        <div className=\"proffesor-activity__wrapper\">\r\n            <div className=\"row flex-spaces child-borders\">\r\n                <label className=\"paper-btn margin\" onClick={handleModal}>Add Course</label>\r\n            </div>\r\n            <ModalComponent\r\n                modal={modal}\r\n                handleClose={handleClose}\r\n                handleModal={handleModal}\r\n                userRole={'course'}\r\n                cloudinaryImage={cloudinaryImage}\r\n                onDrop={onDrop}\r\n                user={course}\r\n                handleChange={handleChange}\r\n                handleSave={handleSave}\r\n            />\r\n            <div className=\"proffesor-activity__container\">\r\n                <div className=\"professor__activity__courses\">\r\n                    {proffesorCourses.length > 0 &&\r\n                        proffesorCourses.map((course: ProffesorWithCourses) => {\r\n                            const { length } = course.registerStudents\r\n                            return (\r\n                                <div className=\"card\" key={course.name}>\r\n                                    <h5>{course.name}</h5>\r\n                                    {course.publicId !== null ?\r\n\r\n                                        <img className=\"course__proffesor\" src={`${cloudinaryFetchUrl}/${course.publicId}`} alt=\"profile\" />\r\n                                        :\r\n                                        <img className=\"course__proffesor\" src={`${cloudinaryFetchUrl}/download_nljny4`} alt=\"profile\" />\r\n                                    }\r\n                                    <div className=\"card-body proffesor_course__body\">\r\n                                        <p >points : {course.points}</p>\r\n                                        <h6 ><b >description</b>   {course.description}</h6>\r\n                                        {length === 0 && <div className=\"course__button__container\">\r\n                                            <button className=\"btn btn-small btn-primary\" onClick={(e) => handleUpdate(course)}>Edit</button>\r\n                                            <button className=\"btn btn-small btn-danger\"\r\n                                                onClick={(e) => handleRemove(course.courseId)}\r\n                                            >remove</button></div>\r\n                                        }\r\n                                        <small className=\"proffesor__register__students__text text-primary\">\r\n                                            {length > 0 ?\r\n                                                <React.Fragment>\r\n\r\n                                                    <h6>{length > 1 ? `${length} Registered Students` : `${length} Registered Student`}</h6>\r\n                                                    <button className=\"btn btn-success\" onClick={\r\n                                                        () => handleChat(course.courseId)}>course chat</button>\r\n                                                </React.Fragment>\r\n                                                :\r\n                                                <b>No Register yet.</b>\r\n                                            }\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport { reduxGetStudentCourses } from \"../../features/Students/StudentsSlice\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { cloudinaryFetchUrl } from \"../../helpers\";\r\n\r\nimport \"./StudentActivity.css\";\r\nimport { StudentCourses } from \"../../interfaces\";\r\n\r\nexport const StudentActivity = ({ studentId, name, publicId }: { studentId: string, name: string, publicId: string }) => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const { studentCourses } = useSelector((state: { student: { studentCourses: StudentCourses[] } }) => state.student)\r\n    React.useEffect(() => {\r\n        const onLoad = async () => {\r\n            await dispatch(reduxGetStudentCourses(studentId))\r\n\r\n        }\r\n        onLoad()\r\n    }, [dispatch, studentId])\r\n\r\n    const handleChat = (courseId: string) => {\r\n        history.push(`/chat/${courseId}`, { studentId, courseId, name, publicId })\r\n    }\r\n\r\n    return (\r\n        <div className=\"student__activity__wrapper\">\r\n            <div className=\"student__activity__headline\" >\r\n                <h1>my courses!</h1>\r\n                <h3>\r\n                    currently you are learning\r\n                    {\" \" + studentCourses.length} courses\r\n                    <br />\r\n                    and a total of\r\n                {\" \"}{studentCourses && studentCourses.reduce((acc: number, cur: StudentCourses) => {\r\n                        let sum = acc + cur.points;\r\n                        return sum\r\n                    }, 0)} points to your degree\r\n                </h3>\r\n            </div>\r\n            <div className=\"student__activity__container\">\r\n                <div className=\"student__activity__courses\">\r\n                    {studentCourses.length > 0 &&\r\n                        studentCourses.map((course: StudentCourses) => (\r\n                            <div className=\"card\" key={course.name}>\r\n                                <img className=\"student__activity\" src={`${cloudinaryFetchUrl}/${course.publicId}`} alt=\"profile\" height=\"100\" width=\"200\" />\r\n                                <div className=\"card-body student__activity__card__body\">\r\n                                    <p className=\"card-title\">name : {course.name}</p>\r\n                                    <b><p className=\"card-title\">points : {course.points}</p></b>\r\n                                    <p className=\"card-title\">description : {course.description}</p>\r\n                                    <button className=\"btn btn-success\" onClick={\r\n                                        () => handleChat(course.courseId)}>course chat</button>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\"\r\nimport { ProffesorActivity } from \"../../components/ProffesorActivity/ProffesorActivity\";\r\nimport { StudentActivity } from \"../../components/StudentActivity/StudentActivity\";\r\nimport { proffesor, student } from \"../../helpers\";\r\nimport \"./Activity.css\";\r\n\r\n\r\nexport const Activity = ({ role, userId, name, publicId }: { role: string, name: string, userId: string, publicId: string }) => {\r\n    return (\r\n        <div className=\"activity__container\">\r\n            {role === proffesor && (\r\n                <ProffesorActivity proffesorId={userId} publicId={publicId} name={name} />\r\n            )}\r\n            {role === student &&\r\n                <StudentActivity\r\n                    studentId={userId} name={name} publicId={publicId} />\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { proffesor, cloudinaryFetchUrl } from \"../../helpers\";\r\nimport { Admin, ProffesorProfileI, Student } from \"../../interfaces\";\r\n\r\nimport \"./ProfileCard.css\";\r\n\r\nexport const ProfileCard = ({ handleModal, user, role }:\r\n    { handleModal: () => void, user: ProffesorProfileI | Admin | Student, role: string }\r\n) => {\r\n    return (\r\n        <div className=\"profile__container\">\r\n            <h4>{user.name}</h4>\r\n            <div className=\"card profile__card\">\r\n                {user && user.publicId &&\r\n                    <img className=\"proffesor__profile\"\r\n                        src={`${cloudinaryFetchUrl}/${user.publicId}`} alt=\"profile\" />\r\n                }\r\n                <div className=\"card-body\">\r\n                    <div>\r\n                        {role === proffesor &&\r\n                            <p className=\"proffesor__register__courses text-primary\" >\r\n                                {user.registerCourses && <small>currently you have <b> {user.registerCourses.length} </b> courses that students can register to</small>}\r\n                            </p>\r\n                        }\r\n                    </div>\r\n                    <div className=\"row flex-spaces child-borders\">\r\n                        <label className=\"paper-btn margin\" onClick={handleModal}>Update</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useCallback } from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { reduxSetProfessor, reduxUpdateProffesor } from '../../features/Proffesors/ProffesorSlice';\r\nimport { UseFormData } from './../../hooks/UseFormData';\r\nimport { UseCloudinaryUpload } from './../../hooks/UseCloudinaryUpload';\r\nimport { setCloudinaryUserObject } from \"../../helpers\";\r\nimport { UseChangeInput } from \"../../hooks/UseChangeInput\";\r\nimport { ModalComponent } from './../ModalComponent/ModalComponent';\r\nimport { ProfileCard } from './../ProfileCard/ProfileCard';\r\nimport { ChangeEvent, ProffesorProfileI } from \"../../interfaces\";\r\n\r\nexport const ProffesorProfile = ({ userId, role }: { userId: string, role: string }) => {\r\n    const dispatch = useDispatch()\r\n    const { proffesor } = useSelector((state: { proffesor: { proffesor: ProffesorProfileI } }) => state.proffesor)\r\n    React.useEffect(() => {\r\n        const onLoad = async () => {\r\n            await dispatch(reduxSetProfessor(userId))\r\n        }\r\n        onLoad()\r\n    }, [dispatch, userId])\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const [user, setvalues] = useState({ name: \"\", image: proffesor.publicId, email: proffesor.email });\r\n    const handleClose = () => {\r\n        setModal(false);\r\n        setCloudinaryImage(() => (proffesor.publicId))\r\n    }\r\n\r\n    const handleModal = () => {\r\n        setModal(true);\r\n\r\n        setvalues(() => ({ name: proffesor.name, image: proffesor.publicId, email: proffesor.email }))\r\n    }\r\n\r\n    const [cloudinaryImage, setCloudinaryImage] = useState(proffesor.publicId)\r\n\r\n    const onDrop = useCallback(async (acceptedFiles: File[]) => {\r\n        const formData = UseFormData(acceptedFiles[0])\r\n        const { data } = await UseCloudinaryUpload(formData)\r\n        setCloudinaryImage(() => (data.public_id))\r\n    }, [])\r\n\r\n    const handleSave = async () => {\r\n        const userObj = setCloudinaryUserObject(\r\n            { name: user.name || proffesor.name, userId: proffesor.userId }\r\n            , cloudinaryImage || proffesor.publicId\r\n        )\r\n\r\n        await dispatch(reduxUpdateProffesor(userObj));\r\n\r\n        setTimeout(() => {\r\n\r\n            setModal(false);\r\n        }, 1000)\r\n    }\r\n    const handleChange = (event: ChangeEvent) => {\r\n        UseChangeInput(event, setvalues)\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <ProfileCard\r\n                role={role}\r\n                user={proffesor}\r\n                handleModal={handleModal}\r\n            />\r\n            <ModalComponent\r\n                modal={modal}\r\n                handleClose={handleClose}\r\n                handleModal={handleModal}\r\n                userRole={\"proffesor\"}\r\n                cloudinaryImage={cloudinaryImage}\r\n                onDrop={onDrop}\r\n                user={user}\r\n                handleChange={handleChange}\r\n                handleSave={handleSave}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}","import React, { useCallback, useState } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { reduxSetStudent, reduxUpdateStudent } from './../../features/Students/StudentsSlice';\r\nimport { UseFormData } from './../../hooks/UseFormData';\r\nimport { UseCloudinaryUpload } from './../../hooks/UseCloudinaryUpload';\r\nimport { setCloudinaryUserObject } from \"../../helpers\";\r\nimport { UseChangeInput } from \"../../hooks/UseChangeInput\";\r\nimport { ModalComponent } from './../ModalComponent/ModalComponent';\r\nimport { ProfileCard } from './../ProfileCard/ProfileCard';\r\nimport { ChangeEvent, Student } from \"../../interfaces\";\r\nimport \"./StudentProfile.css\";\r\n\r\nexport const StudentProfile = ({ userId, role }: { userId: string, role: string }) => {\r\n    const { student } = useSelector((state: { student: { student: Student } }) => state.student)\r\n    const dispatch = useDispatch()\r\n\r\n    const [cloudinaryImage, setCloudinaryImage] = useState(student.publicId)\r\n    const [modal, setModal] = useState(false);\r\n    const [user, setvalues] = useState({ name: \"\", image: \"\" });\r\n\r\n    React.useEffect(() => {\r\n        const onLoad = async () => {\r\n            await dispatch(reduxSetStudent(userId))\r\n        }\r\n        onLoad()\r\n    }, [dispatch, userId])\r\n    const handleClose = () => {\r\n        setModal(false);\r\n        setCloudinaryImage(() => (\"\"))\r\n    }\r\n\r\n    const handleModal = () => {\r\n        setvalues(() => ({ name: student.name, image: student.publicId }))\r\n        setCloudinaryImage(() => (student.publicId))\r\n\r\n        setModal(true);\r\n    }\r\n\r\n\r\n\r\n    const onDrop = useCallback(async (acceptedFiles: File[]) => {\r\n        const formData = UseFormData(acceptedFiles[0])\r\n        const { data } = await UseCloudinaryUpload(formData)\r\n        setCloudinaryImage(() => (data.public_id))\r\n    }, [])\r\n\r\n\r\n    const handleSave = async () => {\r\n        const userObj = setCloudinaryUserObject(\r\n            { name: user.name || student.name, userId: student.userId }\r\n            , cloudinaryImage || student.publicId)\r\n        await dispatch(reduxUpdateStudent(userObj));\r\n        setTimeout(() => {\r\n\r\n            setModal(false);\r\n        }, 1000)\r\n    }\r\n    const handleChange = (event: ChangeEvent) => {\r\n        UseChangeInput(event, setvalues)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <ProfileCard\r\n                user={student}\r\n                handleModal={handleModal}\r\n                role={role}\r\n            />\r\n            <ModalComponent\r\n                handleModal={handleModal}\r\n                modal={modal}\r\n                handleClose={handleClose}\r\n                userRole={student.role}\r\n                cloudinaryImage={cloudinaryImage}\r\n                onDrop={onDrop}\r\n                user={user}\r\n                handleChange={handleChange}\r\n                handleSave={handleSave}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nimport { AppDispatch } from \"../../redux/store\";\r\nimport { UserObjectImage } from \"../../interfaces\";\r\nimport { graphqlconfiguration } from \"../../helpers\";\r\n\r\nconst admin = createSlice({\r\n    name: \"admin\",\r\n    initialState: {\r\n        admin: {\r\n            userId: \"\",\r\n            name: \"\",\r\n            role: \"\",\r\n            email: \"\",\r\n            publicId: \"\"\r\n        }\r\n    },\r\n    reducers: {\r\n        setAdmin: (state, action) => {\r\n            state.admin = action.payload;\r\n\r\n        },\r\n        updateAdmin: (state, action) => {\r\n            state.admin = action.payload;\r\n        },\r\n    }\r\n})\r\n\r\nexport const {\r\n    setAdmin\r\n} = admin.actions;\r\nexport default admin.reducer\r\n\r\n\r\nexport const reduxSetAdmin = (adminId: string\r\n) => async (dispatch: AppDispatch) => {\r\n    let requestBody = {\r\n        query: `\r\n                query {\r\n                    getAdmin(adminId: \"${adminId}\") {\r\n                        userId\r\n                        name\r\n                        token \r\n                        role \r\n                        email\r\n                        publicId\r\n                }\r\n              }\r\n                  `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.getAdmin) throw new Error(data.errors[0].message)\r\n        dispatch(setAdmin(data.data.getAdmin))\r\n    } catch (ex) {\r\n        console.error(ex.message);\r\n    }\r\n}\r\nexport const reduxUpdateAdmin = (userObj: UserObjectImage\r\n) => async (dispatch: AppDispatch) => {\r\n    let requestBody = {\r\n        query: `\r\n                    mutation {\r\n                        updateAdmin( adminId: \"${userObj.userId}\", name: \"${userObj.name}\",\r\n                          publicId: \"${userObj.publicId}\") {\r\n                            userId\r\n                            name\r\n                            email\r\n                            publicId\r\n                        }\r\n                      }\r\n                    `\r\n    };\r\n    try {\r\n        const configure: any = graphqlconfiguration(requestBody)\r\n        const { data } = await axios(\r\n            configure\r\n        );\r\n        if (!data.data.updateAdmin) return console.error(data.errors[0].message)\r\n        await dispatch(setAdmin(data.data.updateAdmin))\r\n    } catch (ex) {\r\n        return console.error(ex.message)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { reduxSetAdmin, reduxUpdateAdmin } from \"../../features/Admin/AdminSlice\";\r\nimport { UseCloudinaryUpload } from '../../hooks/UseCloudinaryUpload';\r\nimport { UseFormData } from './../../hooks/UseFormData';\r\nimport { setCloudinaryUserObject } from \"../../helpers\";\r\nimport { UseChangeInput } from \"../../hooks/UseChangeInput\";\r\nimport { ModalComponent } from './../ModalComponent/ModalComponent';\r\nimport { ProfileCard } from './../ProfileCard/ProfileCard';\r\nimport { UserObjectImage } from \"../../interfaces\";\r\nexport const AdminProfile = ({ userId, role }: { userId: string, role: string }) => {\r\n    const { admin } = useSelector((state: any) => state.admin)\r\n    const dispatch = useDispatch();\r\n    const [cloudinaryImage, setCloudinaryImage] = useState(admin.publicId)\r\n    const [modal, setModal] = useState(false);\r\n    const [user, setvalues] = useState({ name: \"\", image: \"\" });\r\n\r\n    useEffect(() => {\r\n        const onLoad = async () => {\r\n            await dispatch(reduxSetAdmin(userId))\r\n        }\r\n        onLoad()\r\n    }, [dispatch, userId])\r\n\r\n    const handleClose = () => {\r\n        setModal(false);\r\n        setCloudinaryImage(() => (admin.publicId))\r\n    }\r\n\r\n    const handleModal = () => {\r\n        setModal(true);\r\n        setvalues(() => ({ name: admin.name, image: admin.publicId }))\r\n    }\r\n\r\n\r\n    const onDrop = useCallback(async (acceptedFiles: File[]) => {\r\n        const formData = UseFormData(acceptedFiles[0])\r\n        const { data } = await UseCloudinaryUpload(formData)\r\n        setCloudinaryImage(() => (data.public_id))\r\n    }, [])\r\n\r\n\r\n    const handleSave = async () => {\r\n        const userObj: UserObjectImage = setCloudinaryUserObject(\r\n            { name: user.name || admin.name, userId: admin.userId },\r\n            cloudinaryImage || admin.publicId\r\n        )\r\n        await dispatch(reduxUpdateAdmin(userObj));\r\n        setTimeout(() => {\r\n\r\n            setModal(false);\r\n        }, 1000)\r\n\r\n    }\r\n    const handleChange = (event: any) => {\r\n        UseChangeInput(event, setvalues)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <ProfileCard\r\n                user={admin}\r\n                handleModal={handleModal}\r\n                role={role}\r\n            />\r\n            <ModalComponent\r\n                modal={modal}\r\n                handleClose={handleClose}\r\n                handleModal={handleModal}\r\n                userRole={admin.role}\r\n                cloudinaryImage={cloudinaryImage}\r\n                onDrop={onDrop}\r\n                user={user}\r\n                handleChange={handleChange}\r\n                handleSave={handleSave}\r\n            />\r\n        </React.Fragment >\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport \"./Profile.css\";\r\nimport { ProffesorProfile } from '../../components/ProffesorProfile/ProffesorProfile';\r\nimport { StudentProfile } from '../../components/StudentProfile/StudentProfile';\r\nimport { AdminProfile } from './../../components/AdminProfile/AdminProfile';\r\nimport { admin, proffesor, student } from '../../helpers';\r\nexport const Profile = ({ userId, role }: { userId: string, role: string }) => {\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {role === admin &&\r\n                <AdminProfile userId={userId} role={role} />\r\n            }\r\n            {role === proffesor &&\r\n                <ProffesorProfile userId={userId} role={role} />\r\n            }\r\n            {role === student &&\r\n                <StudentProfile userId={userId} role={role} />\r\n            }\r\n        </React.Fragment>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { reduxGetStudentsWithCousesName } from \"../../features/Students/StudentsSlice\";\r\nimport { cloudinaryFetchUrl } from \"../../helpers\";\r\nimport { StudentList } from \"../../interfaces\"\r\nimport \"./Students.css\";\r\n\r\nexport const Students = () => {\r\n    const dispatch = useDispatch()\r\n    const { students } = useSelector((state: { student: { students: any[] } }) => state.student)\r\n    React.useEffect(() => {\r\n        dispatch(reduxGetStudentsWithCousesName())\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"students__wrapper\" >\r\n            <div className=\"students__list__container\">\r\n                {students.length && students.map((student: any) => {\r\n                    return (\r\n                        <div className=\"card\" key={student.email}>\r\n                            <h5 className=\"card-title\"> {student.name} </h5 >\r\n                            <img\r\n                                src={`${cloudinaryFetchUrl}/${student.publicId}`} alt=\"profile\" />\r\n                            <div className=\"card-body card__student__courses____body\">\r\n                                <h6 className=\"text-primary\">Register courses</h6>\r\n                                <small className=\"card__small__register\" >\r\n                                    {student.registerCourses && student.registerCourses.map(\r\n                                        (course: any) =>\r\n                                            <p key={course.name}><b>{course.name}</b></p>\r\n                                    )}\r\n                                </small>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { reduxGetCourses } from \"../../features/Courses/CourseSlice\";\r\nexport const Payments = () => {\r\n    const { courses } = useSelector((state: any) => state.course)\r\n    const dispatch = useDispatch()\r\n    React.useEffect(() => {\r\n        const fetchCourses = async () => {\r\n            await dispatch(reduxGetCourses('userId'))\r\n        }\r\n        fetchCourses()\r\n    }, [dispatch])\r\n    return (\r\n        <div style={{ width: '100%' }}>\r\n            <div style={{ textAlign: 'center' }}>\r\n                <h4>\r\n                    currently you have\r\n            <b>\r\n\r\n                        {courses && \" \" + courses.reduce((acc: any, cur: any) => {\r\n                            return acc = acc + cur.registerStudents.length\r\n                        }, 0) + \" \"}\r\n                    </b>\r\n                    courses that are register\r\n                    </h4>\r\n                <h2>Your university as income of{\" \" + 2000 * courses.reduce((acc: any, cur: any) => {\r\n                    return acc = acc + cur.registerStudents.length\r\n                }, 0)}$</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Icon } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport moment from \"moment\";\r\nimport { cloudinaryFetchUrl } from \"../../helpers\";\r\nimport { reduxGetCourse } from './../../features/Courses/CourseSlice';\r\n// import { animateScroll as scroll, Scroll } from \"react-scroll\";\r\nimport \"./Chat.css\";\r\nconst socket: SocketIOClient.Socket = socketIOClient(\"http://localhost:8000\")\r\n// const scrollToRef = (ref: any) => window.scrollTo(0, ref.current.offsetTop)\r\n\r\n// var Element = Scroll.Element;\r\n// var scroller = Scroll.scroller;\r\n\r\nexport const Chat = () => {\r\n    const myRef = useRef(null)\r\n\r\n\r\n    const messagesContainer: any = useRef()\r\n    const dispatch = useDispatch()\r\n\r\n    const history: any = useHistory();\r\n    const [message, setMessage] = React.useState(\"\");\r\n    const [messages, setMessages] = React.useState<any>([])\r\n    React.useEffect(() => {\r\n\r\n        const onLoad = async () => {\r\n            const course: any = await dispatch(reduxGetCourse(history.location.state.courseId))\r\n            if (course.courseChat.length > 0) {\r\n                setMessages(course.courseChat)\r\n            }\r\n\r\n\r\n        }\r\n\r\n        socket.emit('Join', history.location.state.courseId)\r\n\r\n        socket.on(history.location.state.courseId, (m: any) => {\r\n            // scrollToRef(myRef)\r\n\r\n            // messagesContainer.scroll.scrollToBottom()\r\n            setMessages((prevMessages: any) => [...prevMessages, m.msg])\r\n        })\r\n\r\n        onLoad()\r\n\r\n        return (() => {\r\n            socket.disconnect();\r\n        })\r\n    }, [dispatch, history])\r\n\r\n\r\n    const hanleSearchChange = (e: any) => {\r\n        setMessage(e.target.value)\r\n\r\n    }\r\n\r\n    const pushSendMessage = () => {\r\n        let userId = history.location.state.studentId || history.location.state.proffesorId\r\n        let courseId = history.location.state.courseId\r\n        let userName = history.location.state.name;\r\n        let publicId = history.location.state.publicId;\r\n        let time = moment(new Date()).format('HH:mm')\r\n\r\n        let type = \"text\";\r\n        socket.emit(history.location.state.courseId, {\r\n            message,\r\n            userId,\r\n            userName,\r\n            courseId,\r\n            time,\r\n            publicId,\r\n            type\r\n        });\r\n\r\n        // Scroll.scroller.scrollTo('myScrollToElement', {\r\n        //     // duration: 1500,\r\n        //     // delay: 100,\r\n        //     smooth: true,\r\n        //     containerId: 'ContainerElementID',\r\n        //     // offset: 50, // Scrolls to element + 50 pixels down the page\r\n        // })\r\n        setMessage(\"\")\r\n\r\n\r\n    }\r\n    return (\r\n        <div className=\"chat__wrapper\">\r\n            <h2> Real Time Chat</h2>\r\n\r\n            <div className=\"messages__container\">\r\n\r\n                {messages && messages.length > 0 && messages.map((m: any, index: any) => (\r\n                    <div key={index}>\r\n                        {m.time + \" \"}<img className=\"student__profile__modal\" src={`${cloudinaryFetchUrl}/${m.publicId}`} alt=\"profile\" />\r\n                        {\" \" + m.message}\r\n                    </div>\r\n                ))}\r\n\r\n\r\n            </div>\r\n            <div className=\"chat__container\" ref={messagesContainer}>\r\n                <input type=\"text\"\r\n                    placeholder=\"Let's start talking\"\r\n                    value={message}\r\n                    onChange={hanleSearchChange}\r\n                    onKeyDown={(e: any) => {\r\n                        if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            pushSendMessage();\r\n\r\n                        }\r\n                    }}\r\n                />\r\n                <button className=\"btn btn-primary\" onClick={pushSendMessage} > <Icon type=\"enter\" /></button>\r\n\r\n            </div>\r\n            {/* <div id=\"ContainerElementID\" */}\r\n            {/* > */}\r\n\r\n            {/* </div> */}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport { Navbar } from './components/Navbar/Navbar';\r\nimport { Home } from './pages/Home/Home';\r\nimport { Auth } from './pages/Auth/Auth';\r\nimport { Courses } from './pages/Courses/Courses';\r\nimport { NotFound } from './pages/NotFound/NotFound';\r\nimport { Logout } from './pages/Logout/Logout';\r\nimport { Proffesores } from './pages/Proffesores/Proffesores';\r\nimport { Activity } from './pages/Activity/Activity';\r\nimport { Profile } from './pages/Profile/Profile';\r\nimport { Students } from './pages/Students/Students';\r\nimport { Payments } from './pages/Payments/Payments';\r\nimport { Chat } from './pages/Chat/Chat';\r\n\r\nimport './App.css';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nconst App = () => {\r\n  const [user, setUser] = React.useState({ name: \"\", token: \"\", role: \"\", userId: \"\", publicId: \"\" })\r\n  const credentials: any = localStorage.getItem('credentials');\r\n  React.useEffect(() => {\r\n    if (credentials !== null) {\r\n      const { name, token, role, userId, publicId } = JSON.parse(credentials)\r\n      setUser({ name, token, role, userId, publicId })\r\n    }\r\n  }, [credentials])\r\n\r\n  return (\r\n    <Router>\r\n      <Navbar name={user.name} token={user.token} role={user.role} />\r\n      <div className=\"routes-wrapper\">\r\n        <Switch>\r\n\r\n          {user.token && user.role === \"Student\" &&\r\n            <Route exact path=\"/auth\" >\r\n              <Redirect to=\"/courses\" />\r\n            </Route>\r\n          }\r\n          {user.token && user.role === \"Proffesor\" &&\r\n            <Route exact path=\"/auth\" >\r\n              <Redirect to=\"/activity\" />\r\n            </Route>\r\n          }\r\n          {user.token && user.role === \"Admin\" &&\r\n            <Route exact path=\"/auth\" >\r\n              <Redirect to=\"/payments\" />\r\n            </Route>\r\n          }\r\n          {user.token &&\r\n            <Route exact path=\"/auth\" >\r\n              <Redirect to=\"/home\" />\r\n            </Route>\r\n          }\r\n          {!user.token &&\r\n            <Route exact path=\"/\" >\r\n              <Redirect to=\"/auth\" />\r\n            </Route>\r\n          }\r\n          {/* <Route exact path=\"/\" >\r\n            <Redirect to=\"/home\" />\r\n          </Route> */}\r\n\r\n          <Route path=\"/home\" component={Home} />\r\n          <Route path=\"/auth\" component={Auth} />\r\n          {user.token && user.role !== \"Proffesor\" &&\r\n            <Route path=\"/courses\" >\r\n              <Courses userId={user.userId} role={user.role} />\r\n            </Route>\r\n          }\r\n          <Route path=\"/logout\" component={Logout} />\r\n          {user.token && user.role === 'Admin' &&\r\n            <Route path=\"/proffesores\" component={Proffesores} />\r\n          }\r\n          {user.token && user.role === 'Admin' &&\r\n            <Route path=\"/students\" component={Students} />\r\n          }\r\n          {user.token && user.role === 'Admin' &&\r\n            <Route path=\"/payments\" component={Payments} />\r\n          }\r\n          {user.token &&\r\n            <Route path=\"/activity\" >\r\n              <Activity\r\n                name={user.name}\r\n                role={user.role}\r\n                userId={user.userId}\r\n                publicId={user.publicId} />\r\n            </Route>\r\n          }\r\n          <Route path=\"/my-profile\" >\r\n            <Profile userId={user.userId} role={user.role} />\r\n          </Route>\r\n\r\n          <Route path=\"/chat/:id\" component={Chat} />\r\n\r\n          <Route path=\"/\" component={NotFound} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\nimport {\r\n    configureStore,\r\n} from \"@reduxjs/toolkit\";\r\nimport adminSlice from \"../features/Admin/AdminSlice\";\r\nimport proffesorSlice from \"../features/Proffesors/ProffesorSlice\";\r\nimport courseSlice from \"../features/Courses/CourseSlice\";\r\nimport studentSlice from \"../features/Students/StudentsSlice\";\r\nimport thunk from \"redux-thunk\";\r\nconst store = configureStore({\r\n    reducer: {\r\n        admin: adminSlice,\r\n        proffesor: proffesorSlice,\r\n        student: studentSlice,\r\n        course: courseSlice\r\n    },\r\n    middleware: [thunk]\r\n})\r\nexport default store\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}